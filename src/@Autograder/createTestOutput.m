function out = createTestOutput(obj, test)
% CREATETESTOUTPUT - Creates the output text given a TestResult object
%   This function takes in the results of a MATLAB unit test and formats the display output for Gradescope. If an error
%   was thrown, it will output the first error message in the stack. If verifications failed, it will output all of
%   them.
%
%   Any strings passed into a .json cannot contain a formatted string from matlab, so sprintf cannot be used.
%   For failed cases, we replace the formatted newline character by replacing it with the escape sequence '\n'.
%   The double quotes are also escaped and illegal ascii characters replaced.
%
%   If the diagnostic contained the keyword 'IMAGEFILE', it will assume that an image was output as a diagnostic. It will
%   take the string following that keyword as an image filepath and convert the image to base64 for display.
%
%   The diagnostic output cuts output past the keyword "Framework Diagnostics", which means the tester is responsible for
%   outputting the relevant data to gradescope. We iterate in the event that a test case has multiple verifications.
%
%   If a student code errors, the report generated by the diagnostic is output, and anything past the
%   'Error in HWX... line is cut off.

arguments
    obj
    test (1, 1) {mustBeA(test, 'matlab.unittest.TestResult')}
end

out = ''; % Add default success message
if test.Incomplete
    out = parseIncompleteTest(obj, test);
elseif test.Failed
    out = parseFailedTest(obj, test);
end
% Html parsing
out(out < 32 & out ~= 10) = 'ï¿½'; % Remove illegal ascii characters, exclude newline
end

function msg = parseIncompleteTest(obj, test)
% Helper function to parse test cases that were incomplete, or in other words errored.

indent = repmat(' ', 1, 4);
spacer = repmat('-', 1, 14);
prefix = sprintf(sprintf('An error occured while running your function.\n%s%s\n%sError Details:\n%s%s\n', ...
    indent, spacer, indent, indent, spacer));

% Always get out the first error report
errorCases = strcmp({test.Details.DiagnosticRecord.Event}, 'ExceptionThrown');
diagnostic = test.Details.DiagnosticRecord(find(errorCases));
exception = diagnostic.Exception(1);

% Create error message based on identifier
if contains(exception.identifier, 'HWStudent')
    msg = sprintf('%s%s%s', prefix, indent, exception.message);
elseif contains(exception.identifier, 'HWTester') || ~any(contains({exception.stack.file}, '+student'))
    msg = 'The autograder ran into an unexpected error while running your function. Please contact the HW TAs for assistance.';
else
    stuFunc = find(contains({exception.stack.file}, '+student'), 1, 'first');
    lines = readlines(exception.stack(stuFunc).file);
    lineNo = exception.stack(stuFunc).line;
    errorMsg = sprintf('%s\n\nError in %s (line %d)\n%s', exception.message, exception.stack(stuFunc).name, lineNo, lines(lineNo));
    msg = sprintf('%s%s%s', prefix, indent, strrep(errorMsg, newline, [newline indent]));
end
% Truncate error message if too long
shouldTruncate = numel(msg) > obj.MaxOutputLength;
if shouldTruncate
    msg = msg(1:obj.MaxOutputLength);
end
% HTML Parsing
msg = strrep(msg, '\', '&#92;');
msg = strrep(msg, '&', '&amp;');
msg = strrep(msg, '<', '&lt;');
msg = strrep(msg, '>', '&gt;');
% Re-add message after to not cut off parsed characters
if shouldTruncate
    msg = sprintf('%s\n<strong>(Error Message Truncated)</strong>', msg);
end
end

function msg = parseFailedTest(obj, test)
% Helper function to parse test cases that failed, or in other words did not pass verification.

msg = sprintf('Verification failed in %s.\n    ----------------\n    Test Diagnostic:', extractAfter(test.Name, '/'));
for i = 1:numel(test.Details.DiagnosticRecord)
    % Temp string created in case multiple verifications were run for one test case.
    temp = test.Details.DiagnosticRecord(i).Report;
    temp = char(extractBetween(temp, sprintf('Test Diagnostic:\n    ----------------\n'), sprintf('\n    ---------------------\n    Framework Diagnostic')));
    filename = extractAfter(temp, 'IMAGEFILE:');
    if ~isempty(filename)
        % Image to base64 encoding
        fid = fopen(filename,'rb');
        % Skip if file cannot be read
        if fid == -1
            continue
        end
        try
            bytes = fread(fid);
            encoder = org.apache.commons.codec.binary.Base64; % base64 encoder
            base64string = char(encoder.encode(bytes))';
            size = obj.ImageSize;
            temp = [extractBefore(temp, 'IMAGEFILE:'), sprintf( ...
                ['<img src=''data:image/png;base64,%s'' width = ''%d'' height = ''%d''> \n    <em>' ...
                'Please run your function in Matlab to view your figure in higher quality.</em>'], ...
                base64string, size(1), size(2))];
            fclose(fid);
        catch E
            warning(getReport(E));
            temp = '<em>Image comparison failed to run.</em>';
        end
    end
    if isempty(temp) % If there is an issue and no output diagnostic is provided, skip output display.
        continue;
    end
    msg = sprintf('%s\n    ----------------\n%s', msg, temp);
end
end
