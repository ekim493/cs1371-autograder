function out = createTestOutput(obj, test)
% CREATETESTOUTPUT - Creates the output text given a TestResult object
%   This function takes in the results of a MATLAB unit test and formats the display output for Gradescope. If an error
%   was thrown, it will output the first error message in the stack. If verifications failed, it will output all of
%   them.
%
%   Any strings passed into a .json cannot contain a formatted string from matlab, so sprintf cannot be used.
%   For failed cases, we replace the formatted newline character by replacing it with the escape sequence '\n'.
%   The double quotes are also escaped and illegal ascii characters replaced.
%
%   If the diagnostic contained the keyword 'IMAGEFILE', it will assume that an image was output as a diagnostic. It will
%   take the string following that keyword as an image filepath and convert the image to base64 for display.
%
%   The diagnostic output cuts output past the keyword "Framework Diagnostics", which means the tester is responsible for
%   outputting the relevant data to gradescope. We iterate in the event that a test case has multiple verifications.
%
%   If a student code errors, the report generated by the diagnostic is output, and anything past the
%   'Error in HWX... line is cut off.

arguments
    obj
    test (1, 1) {mustBeA(test, 'matlab.unittest.TestResult')}
end

out = ''; % Add default success message
if test.Incomplete
    out = parseIncompleteTest(obj, test);
elseif test.Failed
    out = parseFailedTest(obj, test);
end
out = strrep(out, '"', '\"'); % Escape double quotes
out(out < 32) = 'ï¿½'; % Remove illegal ascii characters
out = strrep(out, '%', '%%'); % fprintf percent sign fix
end

function msg = parseIncompleteTest(obj, test)
% Helper function to parse test cases that were incomplete, or in other words errored.

% If multiple verifications were run, filter out to get the first error report
errorCases = strcmp({test.Details.DiagnosticRecord.Event}, 'ExceptionThrown');
msg = test.Details.DiagnosticRecord(find(errorCases)).Report;
% Truncate error message if too long
shouldTruncate = numel(msg) > obj.MaxOutputLength;
if shouldTruncate
    msg = msg(1:obj.MaxOutputLength);
end
% HTML Parsing
msg = strrep(msg, '\', '&#92;');
msg = strrep(msg, newline, '\n');
msg = strrep(msg, '&', '&amp;');
msg = strrep(msg, '<', '&lt;');
msg = strrep(msg, '>', '&gt;');
% Re-add message after to not cut off parsed characters
if shouldTruncate
    msg = [msg, '\n<strong>(Error Message Truncated)</strong>'];
end
% Filter error message
if contains(msg, 'HWTester:')
    msg = 'The autograder ran into an unexpected error while running your function. Please contact the HW TAs for assistance.';
elseif contains(msg, 'HWStudent:') || contains(msg, 'Error in TestRunner/runFunc')
    % Parse error message. Contains legacy code that supports old parallized testing. Cuts out error ID and any
    % error messages thrown by TestRunner itself.
    if contains(msg, 'Error using TestRunner/runFunc') || contains(msg, 'Error in TestRunner/runFunc')
        msg = char(extractBetween(msg, '\n    --------------\n    Error Details:\n    --------------\n', '\n    \n    Error in TestRunner'));
        if contains(msg, 'Error using TestRunner/runFunc (') % No encryption, has lineno
            msg = regexprep(msg, 'Error using TestRunner/runFunc \(line \d+\)\\n    ', '');
        elseif contains(msg, 'Error using TestRunner/runFunc') % Encrypted TestRunner outputs no line
            msg = extractAfter(msg, 'Error using TestRunner/runFunc\n');
        elseif contains(msg, '&lt;/a&gt;')
            % Case for invalid expression
            msg = [extractBefore(msg, '&lt;a') erase(extractAfter(msg, ')"&gt;'), '&lt;/a&gt;')];
            msg = erase(msg, 'Error using nargin\n    ');
        end
    else
        msg = char(extractBetween(msg, '\n    --------------\n    Error Details:\n    --------------\n', '\n    \n    Error in H'));
        if contains(msg, 'Error using TestRunner/run (') % No encryption, has lineno
            msg = regexprep(msg, 'Error using TestRunner/run \(line \d+\)\\n    ', '');
        elseif contains(msg, 'Error using TestRunner/run') % Encrypted TestRunner outputs no line
            msg = extractAfter(msg, 'Error using TestRunner/run\n');
        end 
    end
    msg = ['An error occured while running your function.\n    --------------\n    Error Details:\n    --------------\n' msg];
else
    % Other error messages (ie. out of memory)
    msg = extractAfter(msg, '\n    --------------\n    Error Details:\n    --------------\n');
    msg = ['An error occured while running your function.\n    --------------\n    Error Details:\n    --------------\n' msg];
end
end

function msg = parseFailedTest(obj, test)
% Helper function to parse test cases that failed, or in other words did not pass verification.

msg = ['Verification failed in ' extractAfter(test.Name, '/') '.\n    ----------------\n    Test Diagnostic:'];
for i = 1:numel(test.Details.DiagnosticRecord)
    % Temp string created in case multiple verifications were run for one test case.
    temp = test.Details.DiagnosticRecord(i).Report;
    % Html parsing. Additonal parsing not necessary as these messages have already been filtered and designed for html output.
    temp = strrep(temp, newline, '\n');
    temp = char(extractBetween(temp, 'Test Diagnostic:\n    ----------------\n', '\n    ---------------------\n    Framework Diagnostic'));
    filename = extractAfter(temp, 'IMAGEFILE:');
    if ~isempty(filename)
        % Image to base64 encoding
        fid = fopen(filename,'rb');
        % Skip if file cannot be read
        if fid == -1
            continue
        end
        bytes = fread(fid);
        encoder = org.apache.commons.codec.binary.Base64; % base64 encoder
        base64string = char(encoder.encode(bytes))';
        size = obj.ImageSize;
        temp = [extractBefore(temp, 'IMAGEFILE:'), sprintf( ...
            ['<img src=''data:image/png;base64,%s'' width = ''%d'' height = ''%d''> \\n    <em>' ...
            'Please run your function in Matlab to view your figure in higher quality.</em>'], ...
            base64string, size(1), size(2))];
        fclose(fid);
    end
    if isempty(temp) % If there is an issue and no output diagnostic is provided, skip output display.
        continue;
    end
    msg = [msg '\n    ----------------\n' temp]; %#ok<AGROW>
end
end