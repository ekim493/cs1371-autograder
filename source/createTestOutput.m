function out = createTestOutput(test)
% CREATETESTOUTPUT - Creates the output text given a TestResult object
%   This function takes in the results of a Matlab unit test and formats the display output for Gradescope. If an error
%   was thrown, it will output the first error message in the stack. If verifications failed, it will output all of
%   them.
%
%   Any strings passed into a .json cannot contain a formatted string from matlab, so sprintf cannot be used.
%   For failed cases, we replace the formatted newline character by replacing it with the escape sequence '\n'.
%   The double quotes are also escaped and illegal ascii characters replaced.
%
%   If the diagnostic contained the keyword 'IMAGEFILE', it will assume that an image was output as a diagnostic. It will
%   take the string following that keyword as an image filepath and convert the image to base64 for display.
%
%   The diagnostic output cuts output past the keyword "Framework Diagnostics", which means the tester is responsible for
%   outputting the relevant data to gradescope. We iterate in the event that a test case has multiple verifications.
%
%   If a student code errors, the report generated by the diagnostic is output, and anything past the
%   'Error in HWX... line is cut off.

validateattributes(test, {'matlab.unittest.TestResult'}, {});
out = ''; % Add default success message
MAX_OUTPUT_LENGTH = 20000; % Set max error message output length
if test.Incomplete
    out = parseIncompleteTest(test, MAX_OUTPUT_LENGTH);
elseif test.Failed
    out = parseFailedTest(test);
end
out = strrep(out, '"', '\"'); % Escape double quotes
out(out < 32) = 'ï¿½'; % Remove illegal ascii characters
out = strrep(out, '%', '%%'); % fprintf percent sign fix
end

function out = parseIncompleteTest(test, MAX_OUTPUT_LENGTH)
% Helper function to parse test cases that were incomplete, or in other words errored.

% If multiple test cases were run, filter out to get the first error report
errorCase = contains({test.Details.DiagnosticRecord.Report}, 'Error occurred');
out = test.Details.DiagnosticRecord(errorCase).Report;
% Truncate error message if too long
shouldTruncate = numel(out) > MAX_OUTPUT_LENGTH;
if shouldTruncate
    out = out(1:MAX_OUTPUT_LENGTH);
end
% HTML Parsing
out = strrep(out, '\', '&#92;');
out = strrep(out, newline, '\n');
out = strrep(out, '&', '&amp;');
out = strrep(out, '<', '&lt;');
out = strrep(out, '>', '&gt;');
% Re-add message after to not cut off parsed characters
if shouldTruncate
    out = [out, '\n<strong>(Error Message Truncated)</strong>'];
end
% Filter error message
if contains(out, 'HWTester:')
    out = 'The autograder ran into an unexpected error while running your function. Please contact the TAs for assistance.';
elseif contains(out, 'HWStudent:') || contains(out, 'Error in TesterHelper/runFunc')
    % Parse error message. Contains legacy code that supports old parallized testing. Cuts out error ID and any
    % error messages thrown by TesterHelper itself.
    if contains(out, 'Error using TesterHelper/runFunc') || contains(out, 'Error in TesterHelper/runFunc')
        out = char(extractBetween(out, '\n    --------------\n    Error Details:\n    --------------\n', '\n    \n    Error in TesterHelper'));
        if contains(out, 'Error using TesterHelper/runFunc (') % No encryption, has lineno
            out = regexprep(out, 'Error using TesterHelper/runFunc \(line \d+\)\\n    ', '');
        elseif contains(out, 'Error using TesterHelper/runFunc') % Encrypted TesterHelper outputs no line
            out = extractAfter(out, 'Error using TesterHelper/runFunc\n');
        elseif contains(out, '</a>')
            % Case for invalid expression
            out = [extractBefore(out, '<a') erase(extractAfter(out, ')">'), '</a>')];
            out = erase(out, 'Error using nargin\n    ');
        end
    else
        out = char(extractBetween(out, '\n    --------------\n    Error Details:\n    --------------\n', '\n    \n    Error in H'));
        if contains(out, 'Error using TesterHelper/run (') % No encryption, has lineno
            out = regexprep(out, 'Error using TesterHelper/run \(line \d+\)\\n    ', '');
        elseif contains(out, 'Error using TesterHelper/run') % Encrypted TesterHelper outputs no line
            out = extractAfter(out, 'Error using TesterHelper/run\n');
        end
    end
    out = ['An error occured while running your function.\n    --------------\n    Error Details:\n    --------------\n' out];
else
    % Other error messages (ie. out of memory)
    out = extractAfter(out, '\n    --------------\n    Error Details:\n    --------------\n');
    out = ['An error occured while running your function.\n    --------------\n    Error Details:\n    --------------\n' out];
end
end

function out = parseFailedTest(test)
% Helper function to parse test cases that failed, or in other words did not pass verification.

out = ['Verification failed in ' extractAfter(test.Name, '/') '.\n    ----------------\n    Test Diagnostic:'];
for j = 1:length(test.Details.DiagnosticRecord)
    % Temp string created in case multiple verifications were run for one test case.
    temp = test.Details.DiagnosticRecord(j).Report;
    % Html parsing. Additonal parsing not necessary as these messages have already been filtered and designed for html
    % output.
    temp = regexprep(temp, '(?<!\\)\\(?![n\\])', '&#92;'); % Individual backslash replaced with html character. Note, this breaks filepaths on Windows
    temp = strrep(temp, newline, '\n');
    temp = char(extractBetween(temp, 'Test Diagnostic:\n    ----------------\n', '\n    ---------------------\n    Framework Diagnostic'));
    filename = extractAfter(temp, 'IMAGEFILE:');
    if ~isempty(filename)
        % Image to base64 encoding
        fid = fopen(filename,'rb');
        % Skip if file cannot be read
        if fid == -1
            continue
        end
        bytes = fread(fid);
        encoder = org.apache.commons.codec.binary.Base64; % base64 encoder
        base64string = char(encoder.encode(bytes))';
        temp = [extractBefore(temp, 'IMAGEFILE:'), sprintf('<img src=''data:image/png;base64,%s'' width = ''760'' height = ''240''> \\n    <em>Please run your function in Matlab to view your figure in higher quality.</em>', base64string)];
        fclose(fid);
    end
    if isempty(temp) % If there is an issue and no output diagnostic is provided, simply skip output display.
        continue;
    end
    out = [out '\n    ----------------\n' temp]; %#ok<AGROW>
end
end