function out = createTestOutput(test)
% CREATETESTOUTPUT - Creates the output text given a TestResult
%   This function takes in the results of a Matlab unit test and formats the display output for Gradescope. If an error
%   was thrown, it will output the first error message in the stack. If verifications failed, it will output all of
%   them. 
% 
%   Any strings passed into a .json cannot contain a formatted string from matlab, so sprintf cannot be used. 
%   For failed cases, we replace the formatted newline character by replacing it with the escape sequence '\n'. 
%   The double quotes are also escaped and illegal ascii characters replaced.
%
%   If the diagnostic contained the keyword 'IMAGEFILE', it will assume that an image was output as a diagnostic. It will
%   take the string following that keyword as an image filepath and convert the image to base64 for display.
% 
%   The diagnostic output cuts output past the keyword "Framework Diagnostics", which means the tester is responsible for 
%   outputting the relevant data to gradescope. We iterate in the event that a test case has multiple verifications.
%
%   If a student code errors, the report generated by the diagnostic is output, and anything past the
%   'Error in HWX... line is cut off. 

validateattributes(test, {'matlab.unittest.TestResult'}, {});
out = ''; % Add default success message
if test.Incomplete
    % If multiple test cases were run, filter out to get the first error report
    errorCase = contains({test.Details.DiagnosticRecord.Report}, 'Error occurred');
    out = test.Details.DiagnosticRecord(errorCase).Report;
    out = strrep(out, newline, '\n');
    % Filter error message
    if contains(out, 'HWTester:')
        out = 'The autograder ran into an unexpected error while running your function. Please contact the TAs for assistance.';
    else
        if contains(out, 'Error using TesterHelper/runFunc')
            out = char(extractBetween(out, '\n    --------------\n    Error Details:\n    --------------\n', '\n    \n    Error in TesterHelper'));
            if contains(out, 'Error using TesterHelper/runFunc (') % No encryption, has lineno
                out = regexprep(out, 'Error using TesterHelper/runFunc \(line \d+\)\\n    ', '');
            elseif contains(out, 'Error using TesterHelper/runFunc') % Encrypted TesterHelper outputs no line
                out = extractAfter(out, 'Error using TesterHelper/runFunc\n');
            end
        else
            out = char(extractBetween(out, '\n    --------------\n    Error Details:\n    --------------\n', '\n    \n    Error in H'));
            if contains(out, 'Error using TesterHelper/run (') % No encryption, has lineno
                out = regexprep(out, 'Error using TesterHelper/run \(line \d+\)\\n    ', '');
            elseif contains(out, 'Error using TesterHelper/run') % Encrypted TesterHelper outputs no line
                out = extractAfter(out, 'Error using TesterHelper/run\n');
            end
        end
        out = ['An error occured while running your function.\n    --------------\n    Error Details:\n    --------------\n' out];
    end
elseif test.Failed
    out = ['Verification failed in ' extractAfter(test.Name, '/') '.\n    ----------------\n    Test Diagnostic:'];
    for j = 1:length(test.Details.DiagnosticRecord)
        % Temp string created in case multiple verifications were run for one test case.
        temp = test.Details.DiagnosticRecord(j).Report;
        temp = strrep(temp, newline, '\n');
        temp = char(extractBetween(temp, 'Test Diagnostic:\n    ----------------\n', '\n    ---------------------\n    Framework Diagnostic'));
        filename = extractAfter(temp, 'IMAGEFILE:');
        if ~isempty(filename)
            % Image to base64 encoding
            fid = fopen(filename,'rb');
            bytes = fread(fid);
            encoder = org.apache.commons.codec.binary.Base64; % base64 encoder
            base64string = char(encoder.encode(bytes))';
            temp = [extractBefore(temp, 'IMAGEFILE:'), sprintf('<img src=''data:image/png;base64,%s'' width = ''760'' height = ''240''> \\n    <em>Please run your function in Matlab to view your figure in higher quality.</em>', base64string)];
        end
        if isempty(temp) % If there is an issue and no output diagnostic is provided, simply skip output display.
            out = [];
            continue;
        end
        out = [out '\n    ----------------\n' temp]; %#ok<AGROW>
    end
end
out = regexprep(out, '(\\)(?!n)', '\\\\'); % Blackslash error fix
out = strrep(out, '"', '\"'); % Escape double quotes
out(out < 32) = 'ï¿½'; % Remove illegal ascii characters
out = strrep(out, '%', '%%'); % fprintf percent sign fix
end